<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ami.ec.channel.dao.pluginManager.BatLogMapper" >
  <resultMap id="BaseResultMap" type="com.ami.ec.channel.domain.pluginManager.BatLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="Id" property="id" jdbcType="BIGINT" />
    <result column="Bat_record_id" property="batRecordId" jdbcType="BIGINT" />
    <result column="Log_time" property="logTime" jdbcType="TIMESTAMP" />
    <result column="Log_content" property="logContent" jdbcType="NVARCHAR" />
    <result column="Is_abnormal" property="isAbnormal" jdbcType="BIT" />
    <result column="ref_id" property="refId" jdbcType="CHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    Id, Bat_record_id, Log_time, Log_content, Is_abnormal, ref_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ami.ec.channel.domain.pluginManager.BatLogExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from Bat_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from Bat_log
    where Id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from Bat_log
    where Id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ami.ec.channel.domain.pluginManager.BatLogExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from Bat_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ami.ec.channel.domain.pluginManager.BatLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into Bat_log (Id, Bat_record_id, Log_time, 
      Log_content, Is_abnormal, ref_id
      )
    values (#{id,jdbcType=BIGINT}, #{batRecordId,jdbcType=BIGINT}, #{logTime,jdbcType=TIMESTAMP}, 
      #{logContent,jdbcType=NVARCHAR}, #{isAbnormal,jdbcType=BIT}, #{refId,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ami.ec.channel.domain.pluginManager.BatLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into Bat_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        Id,
      </if>
      <if test="batRecordId != null" >
        Bat_record_id,
      </if>
      <if test="logTime != null" >
        Log_time,
      </if>
      <if test="logContent != null" >
        Log_content,
      </if>
      <if test="isAbnormal != null" >
        Is_abnormal,
      </if>
      <if test="refId != null" >
        ref_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="batRecordId != null" >
        #{batRecordId,jdbcType=BIGINT},
      </if>
      <if test="logTime != null" >
        #{logTime,jdbcType=TIMESTAMP},
      </if>
      <if test="logContent != null" >
        #{logContent,jdbcType=NVARCHAR},
      </if>
      <if test="isAbnormal != null" >
        #{isAbnormal,jdbcType=BIT},
      </if>
      <if test="refId != null" >
        #{refId,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ami.ec.channel.domain.pluginManager.BatLogExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from Bat_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update Bat_log
    <set >
      <if test="record.id != null" >
        Id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.batRecordId != null" >
        Bat_record_id = #{record.batRecordId,jdbcType=BIGINT},
      </if>
      <if test="record.logTime != null" >
        Log_time = #{record.logTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.logContent != null" >
        Log_content = #{record.logContent,jdbcType=NVARCHAR},
      </if>
      <if test="record.isAbnormal != null" >
        Is_abnormal = #{record.isAbnormal,jdbcType=BIT},
      </if>
      <if test="record.refId != null" >
        ref_id = #{record.refId,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update Bat_log
    set Id = #{record.id,jdbcType=BIGINT},
      Bat_record_id = #{record.batRecordId,jdbcType=BIGINT},
      Log_time = #{record.logTime,jdbcType=TIMESTAMP},
      Log_content = #{record.logContent,jdbcType=NVARCHAR},
      Is_abnormal = #{record.isAbnormal,jdbcType=BIT},
      ref_id = #{record.refId,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ami.ec.channel.domain.pluginManager.BatLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update Bat_log
    <set >
      <if test="batRecordId != null" >
        Bat_record_id = #{batRecordId,jdbcType=BIGINT},
      </if>
      <if test="logTime != null" >
        Log_time = #{logTime,jdbcType=TIMESTAMP},
      </if>
      <if test="logContent != null" >
        Log_content = #{logContent,jdbcType=NVARCHAR},
      </if>
      <if test="isAbnormal != null" >
        Is_abnormal = #{isAbnormal,jdbcType=BIT},
      </if>
      <if test="refId != null" >
        ref_id = #{refId,jdbcType=CHAR},
      </if>
    </set>
    where Id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ami.ec.channel.domain.pluginManager.BatLog" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update Bat_log
    set Bat_record_id = #{batRecordId,jdbcType=BIGINT},
      Log_time = #{logTime,jdbcType=TIMESTAMP},
      Log_content = #{logContent,jdbcType=NVARCHAR},
      Is_abnormal = #{isAbnormal,jdbcType=BIT},
      ref_id = #{refId,jdbcType=CHAR}
    where Id = #{id,jdbcType=BIGINT}
  </update>
</mapper>